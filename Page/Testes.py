# Testes.py
import streamlit as st
import pandas as pd
import numpy as np
import scipy.stats as stats
import plotly.express as px
from scipy.stats import shapiro, mannwhitneyu, spearmanr

def show():
    st.title("üìä Testes de Hip√≥tese Avan√ßados")
    
    # Widget para sele√ß√£o da m√©trica
    variavel_alvo = st.selectbox(
        "Selecione a M√©trica para An√°lise",
        ["Visualiza√ß√µes", "Curtidas", "Compartilhamentos", "Novos Seguidores"],
        index=0,
        key="var_alvo"
    )
    
    # Verifica√ß√£o de dados carregados
    if "df_ig" not in st.session_state:
        st.error("Dados n√£o carregados!")
        return
    
    # Pr√©-processamento seguro
    try:
        df = st.session_state["df_ig"].copy()
        
        # Colunas essenciais e tratamento de dados
        essential_cols = [
            "Visualiza√ß√µes", "Alcance", "Curtidas", "Nome dos Posts",
            "Tipo de Publica√ß√£o", "Dura√ß√£o (segundos)", "Hor√°rio de Postagem",
            "Dia da Semana do Post", "Novos Seguidores", "Compartilhamentos", 
            "V√≠deos Salvos"
        ]
        
        df = df.dropna(subset=essential_cols).reset_index(drop=True)
        
        # Tratamento de outliers
        Q1 = df["Visualiza√ß√µes"].quantile(0.25)
        Q3 = df["Visualiza√ß√µes"].quantile(0.75)
        IQR = Q3 - Q1
        df = df[~((df["Visualiza√ß√µes"] < (Q1 - 1.5 * IQR)) | 
                 (df["Visualiza√ß√µes"] > (Q3 + 1.5 * IQR)))]
        
        # Transforma√ß√µes e CTAs
        df["log_curtidas"] = np.log1p(df["Curtidas"])
        df["Tem CTA"] = df["Nome dos Posts"].str.contains(
            r'(?i)(comente|link na bio|clique|inscreva|responda|aprender|acesse|clica|conhe√ßa)',
            regex=True,
            na=False
        ).astype(bool)
        
        assert df["Tem CTA"].dtype == bool
        
    except Exception as e:
        st.error(f"Erro no pr√©-processamento: {str(e)}")
        st.stop()

    # =========================================================================
    # TESTE 1: Compara√ß√£o Reels vs Imagens
    # =========================================================================
    with st.expander("üé¨ Reels vs Imagens", expanded=True):
        st.subheader("An√°lise Comparativa de Formatos")
        
        reel_data = df[df["Tipo de Publica√ß√£o"].str.contains("Reel", na=False)]
        imagem_data = df[df["Tipo de Publica√ß√£o"].str.contains("Imagem", na=False)]
        
        col1, col2 = st.columns(2)
        
        with col1:
            fig = px.box(
                df, 
                x="Tipo de Publica√ß√£o", 
                y=variavel_alvo,
                color="Tipo de Publica√ß√£o",
                color_discrete_sequence=["#1f77b4", "#ff7f0e"],
                title=f"Distribui√ß√£o de {variavel_alvo}",
                points="all",
                hover_data=["Nome dos Posts"]
            )
            fig.update_layout(
                template="plotly_white",
                xaxis_title=None,
                yaxis_title=variavel_alvo,
                showlegend=False
            )
            st.plotly_chart(fig, use_container_width=True)
            
            st.caption("""
            **üìå Como interpretar:**  
            ‚Ä¢ Cada caixa representa a distribui√ß√£o dos dados  
            ‚Ä¢ Linha central = Mediana (valor que divide os dados ao meio)  
            ‚Ä¢ Bordas da caixa = Quartis 25% e 75%  
            ‚Ä¢ Pontos fora = Posts com desempenho excepcional
            """)
            
        with col2:
            if len(reel_data) >= 10 and len(imagem_data) >= 10:
                _, p_reel = shapiro(reel_data[variavel_alvo])
                _, p_img = shapiro(imagem_data[variavel_alvo])
                
                if p_reel > 0.05 and p_img > 0.05:
                    t_stat, p_val = stats.ttest_ind(reel_data[variavel_alvo], imagem_data[variavel_alvo])
                    st.metric("Teste T de Student", f"p = {p_val:.4f}")
                else:
                    u_stat, p_val = mannwhitneyu(reel_data[variavel_alvo], imagem_data[variavel_alvo])
                    st.metric("Teste Mann-Whitney U", f"p = {p_val:.4f}")
                
                st.metric("Diferen√ßa Mediana", 
                        f"{reel_data[variavel_alvo].median() - imagem_data[variavel_alvo].median():.1f}",
                        help="Diferen√ßa entre os valores t√≠picos de cada grupo")
                
                st.caption("""
                **üîç Interpreta√ß√£o do p-valor:**  
                ‚Ä¢ p < 0.05 ‚Üí Diferen√ßa **significativa** entre grupos  
                ‚Ä¢ p > 0.05 ‚Üí Diferen√ßa **n√£o significativa**  
                ‚Ä¢ Valores pr√≥ximos de 0 indicam maior confian√ßa
                """)
                
            else:
                pass

    # =========================================================================
    # TESTE 2: An√°lise Temporal
    # =========================================================================
    with st.expander("‚è∞ Melhor Hor√°rio para Postar"):
        st.subheader("Performance Temporal Detalhada")
        
        df["Per√≠odo"] = pd.cut(df["Hor√°rio de Postagem"],
                             bins=[0, 9, 12, 15, 18, 24],
                             labels=["Madrugada", "Manh√£", "Almo√ßo", "Tarde", "Noite"])
        
        heatmap_data = df.pivot_table(
            index="Dia da Semana do Post",
            columns="Per√≠odo",
            values=variavel_alvo,
            aggfunc='median'
        )
        
        fig = px.imshow(
            heatmap_data,
            labels=dict(x="Per√≠odo", y="Dia", color=variavel_alvo),
            color_continuous_scale='Greens',
            title=f"Desempenho de {variavel_alvo} por Dia/Hor√°rio"
        )
        fig.update_layout(
            xaxis=dict(tickangle=-45),
            coloraxis_colorbar=dict(title="M√©dia")
        )
        st.plotly_chart(fig, use_container_width=True)
        
        st.caption("""
        **üß≠ Guia de uso:**  
        ‚Ä¢ Cores mais escuras ‚Üí Melhor desempenho  
        ‚Ä¢ Combine dias da semana e hor√°rios com maior intensidade  
        ‚Ä¢ Dados vazios (brancos) indicam falta de posts no per√≠odo
        """)

    # =========================================================================
    # TESTE 3: Impacto de CTAs
    # =========================================================================
    with st.expander("üì£ Efeito de Chamadas √† A√ß√£o"):
        st.subheader("An√°lise de CTAs")
        
        col1, col2 = st.columns([2, 1])
        with col1:
            fig = px.histogram(
                df,
                x=variavel_alvo,
                color="Tem CTA",
                nbins=30,
                marginal="rug",
                opacity=0.7,
                color_discrete_sequence=["#2ca02c", "#d62728"],
                title=f"Distribui√ß√£o de {variavel_alvo} por CTA",
                barmode="overlay"
            )
            fig.update_layout(
                template="plotly_white",
                legend_title_text="Tem CTA?",
                hoverlabel=dict(bgcolor="white")
            )
            st.plotly_chart(fig, use_container_width=True)
            
            st.caption("""
            **üìä O que observar:**  
            ‚Ä¢ Sobreposi√ß√£o total = CTAs n√£o fazem diferen√ßa  
            ‚Ä¢ Separa√ß√£o clara = CTAs impactam o desempenho  
            ‚Ä¢ Rug plot (barrinhas) mostra distribui√ß√£o detalhada
            """)
            
        with col2:
            cta_stats = df.groupby("Tem CTA")[variavel_alvo].agg([
                ('M√©dia', 'mean'),
                ('Mediana', 'median'),
                ('Total Posts', 'count')
            ])
            
            st.dataframe(
                cta_stats.style.format({
                    'M√©dia': '{:.1f}',
                    'Mediana': '{:.1f}',
                    'Total Posts': '{:.0f}'
                }),
                use_container_width=True
            )
            
            if len(df[df["Tem CTA"]]) >= 10 and len(df[~df["Tem CTA"]]) >= 10:
                _, p_val = mannwhitneyu(
                    df[df["Tem CTA"]][variavel_alvo],
                    df[~df["Tem CTA"]][variavel_alvo]
                )
                st.metric("Teste Mann-Whitney U", f"p = {p_val:.4f}")
                
                st.caption(f"""
                **üéØ Resultado:**  
                {'‚úÖ Diferen√ßa significativa' if p_val < 0.05 else '‚ùå Sem diferen√ßa relevante'}  
                {'(CTAs funcionam!)' if p_val < 0.05 else '(CTAs n√£o fazem diferen√ßa)'}
                """)

    # =========================================================================
    # TESTE 4: Correla√ß√µes
    # =========================================================================
    with st.expander("üîó Rela√ß√µes entre M√©tricas"):
        st.subheader("An√°lise de Correla√ß√£o Multivariada")
        
        numeric_cols = df.select_dtypes(include=np.number).columns.tolist()
        selected = st.multiselect("Selecione vari√°veis para an√°lise:", numeric_cols, default=numeric_cols[:4])
        
        if len(selected) >= 2:
            corr_matrix = df[selected].corr(method='spearman')
            p_values = df[selected].apply(lambda x: df[selected].apply(
                lambda y: spearmanr(x, y).pvalue
            ))
            
            mask = (p_values < 0.05) & (abs(corr_matrix) > 0.3)
            corr_filtrada = corr_matrix.where(mask)
            
            fig = px.imshow(
                corr_filtrada,
                text_auto=".2f",
                color_continuous_scale='RdBu',
                range_color=[-1, 1],
                title="Correla√ß√µes Relevantes (p < 0.05 e |r| > 0.3)"
            )
            fig.update_layout(
                xaxis=dict(tickangle=45),
                width=800, height=800
            )
            st.plotly_chart(fig, use_container_width=True)
            
            st.caption("""
            **üîó Escala de Correla√ß√£o:**  
            ‚Ä¢ üîµ **+1** = Aumento conjunto perfeito  
            ‚Ä¢ üî¥ **-1** = Rela√ß√£o inversa perfeita  
            ‚Ä¢ **0** = Sem rela√ß√£o detectada  
            ‚Ä¢ Somente correla√ß√µes estatisticamente relevantes s√£o exibidas
            """)

    # =========================================================================
    # TESTE 5: Dura√ß√£o de Reels (Quartis Explicados)
    # =========================================================================
    with st.expander("‚è±Ô∏è An√°lise de Dura√ß√£o de V√≠deos"):
        st.subheader("Otimiza√ß√£o de Dura√ß√£o")
        
        df_reels = df[df["Tipo de Publica√ß√£o"].str.contains("Reel", na=False)].copy()
        
        if not df_reels.empty:
            df_reels["Quartil Dura√ß√£o"] = pd.qcut(
                df_reels["Dura√ß√£o (segundos)"],
                q=4,
                labels=["Q1 (25% Mais Curtos)", "Q2", "Q3", "Q4 (25% Mais Longos)"]
            )
            
            col1, col2 = st.columns(2)
            with col1:
                fig = px.box(
                    df_reels,
                    x="Quartil Dura√ß√£o",
                    y=variavel_alvo,
                    color="Quartil Dura√ß√£o",
                    color_discrete_sequence=px.colors.sequential.Blues,
                    title=f"Desempenho por Dura√ß√£o de Reels"
                )
                fig.update_layout(
                    template="plotly_white",
                    xaxis_title="Quartil de Dura√ß√£o",
                    showlegend=False
                )
                st.plotly_chart(fig, use_container_width=True)
                
                st.caption("""
                **üìê O que s√£o Quartis?**  
                Divis√£o dos v√≠deos em 4 grupos igualmente populados:  
                1. **Q1:** 25% mais curtos (ex: 0-15 segundos)  
                2. **Q2:** 25-50% de dura√ß√£o  
                3. **Q3:** 50-75% de dura√ß√£o  
                4. **Q4:** 25% mais longos (ex: acima de 45 segundos)
                """)
                
            with col2:
                duration_stats = df_reels.groupby("Quartil Dura√ß√£o")[variavel_alvo].agg([
                    ('Quantidade', 'count'),
                    ('M√©dia', 'mean'),
                    ('Desvio Padr√£o', 'std'),
                    ('M√≠nimo', 'min'),
                    ('25%', lambda x: x.quantile(0.25)),
                    ('Mediana', 'median'),
                    ('75%', lambda x: x.quantile(0.75)),
                    ('M√°ximo', 'max')
                ])
                
                st.dataframe(
                    duration_stats.style.format({
                        'M√©dia': '{:.1f}',
                        'Desvio Padr√£o': '{:.1f}',
                        '25%': '{:.1f}',
                        'Mediana': '{:.1f}',
                        '75%': '{:.1f}'
                    }),
                    use_container_width=True
                )
                
                st.caption("""
                **üìà Legenda da Tabela:**  
                ‚Ä¢ **Mediana:** Valor t√≠pico de cada grupo  
                ‚Ä¢ **25%/75%:** Limites inferior/superior da maioria dos dados  
                ‚Ä¢ **Desvio Padr√£o:** Medida de varia√ß√£o (valores altos = mais dispers√£o)
                """)

    # =========================================================================
    # TESTE 6: Valida√ß√£o dos Dados (Explica√ß√£o Detalhada)
    # =========================================================================
    with st.expander("üîç Valida√ß√£o e Consist√™ncia"):
        st.subheader("Verifica√ß√£o de Qualidade dos Dados")
        
        col1, col2 = st.columns(2)
        with col1:
            st.metric("Total de Posts Analisados", len(df), help="Posts ap√≥s limpeza de dados")
            st.metric("Posts com Reels", df["Tipo de Publica√ß√£o"].str.contains("Reel").sum(), 
                     help="V√≠deos curtos no formato Reel")
            st.metric("Posts com Imagens", df["Tipo de Publica√ß√£o"].str.contains("Imagem").sum(),
                     help="Posts est√°ticos de imagem √∫nica")
            
        with col2:
            cta_counts = df["Tem CTA"].value_counts(normalize=True).reset_index()
            cta_counts.columns = ["Tem CTA", "Propor√ß√£o"]
            fig = px.bar(
                cta_counts, 
                x="Propor√ß√£o", 
                y="Tem CTA",
                orientation='h',
                color="Tem CTA",
                color_discrete_sequence=["#1f77b4", "#ff7f0e"],
                text_auto=".1%",
                title="Propor√ß√£o de Posts com CTAs"
            )
            fig.update_layout(template="plotly_white", showlegend=False)
            st.plotly_chart(fig, use_container_width=True)
            
            st.caption("""
            **üì¢ O que isso significa?**  
            Mostra a frequ√™ncia de uso de Chamadas √† A√ß√£o:  
            ‚Ä¢ **True:** Posts com instru√ß√µes diretas ao p√∫blico  
            ‚Ä¢ **False:** Posts apenas informativos  
            ‚Ä¢ Exemplo: 70% em True = maioria pede a√ß√£o do p√∫blico
            """)

if __name__ == "__main__":
    show()
